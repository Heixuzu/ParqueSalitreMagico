/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.AtraccionControlador;
import controlador.TiqueteControlador;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Atraccion;
import modelo.Cliente;
import modelo.Tiquete;

/**
 *
 * @author Heidy
 */
public class VistaIngresoAtracciones extends javax.swing.JFrame {

    /**
     * Creates new form VistaAtracciones
     */
    public VistaIngresoAtracciones() {
        initComponents();
        setTitle("Ingreso a Atracciones");
        cargarAtraccionesHabilitadas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTiquete = new javax.swing.JTextField();
        txtAtraccion = new javax.swing.JComboBox<>();
        btnIngresar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtAlturaMinima = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCondiciones = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        txtClasificacion = new javax.swing.JTextField();
        btnAtras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        jLabel2.setText("Escoge a qué atracción deseas ingresar");

        jLabel1.setText("Ingresa el número de tu tiquete");

        txtAtraccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txtAtraccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAtraccionActionPerformed(evt);
            }
        });

        btnIngresar.setText("Ingresar");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        jLabel3.setText("Descripción");

        jLabel4.setText("Condiciones de uso");

        jLabel5.setText("Altura mínima");

        jScrollPane3.setViewportView(txtDescripcion);

        jScrollPane4.setViewportView(txtCondiciones);

        jLabel6.setText("Clasificación");

        btnAtras.setText("Atrás");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnIngresar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAtraccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtAlturaMinima)
                                    .addComponent(txtClasificacion))))
                        .addContainerGap(89, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTiquete, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtras)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTiquete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtras))
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(txtAtraccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtClasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(txtAlturaMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        String atraccionSeleccionada = (String) txtAtraccion.getSelectedItem();
        int tiqueteId = Integer.parseInt(txtTiquete.getText());
        
        // Instanciar controladores
        AtraccionControlador atraccionControlador = new AtraccionControlador();
        TiqueteControlador tiqueteControlador = new TiqueteControlador();
          
        // Obtener la atracción seleccionada
        Atraccion atraccion = atraccionControlador.obtenerAtraccionPorNombre(atraccionSeleccionada);
    
        // Obtener la estatura del cliente asociada al tiquete
        Cliente cliente = tiqueteControlador.obtenerClientePorTiquete(tiqueteId);
        double estatura = cliente.getEstatura();
        
        // Verificar si el cliente cumple con la altura mínima
        boolean cumpleAlturaMinima = atraccionControlador.comprobarAlturaMinima(estatura, atraccion.getId());
        
        if (cumpleAlturaMinima) {
            // El cliente cumple con la altura mínima
            JOptionPane.showMessageDialog(this, "¡Disfruta de " + atraccionSeleccionada + "!");
        } else {
            // El cliente no cumple con la altura mínima
            JOptionPane.showMessageDialog(null, "No cumples con la altura mínima requerida para esta atracción.",
                                          "Advertencia", JOptionPane.WARNING_MESSAGE);
            atraccionControlador.agregarAlerta(String.valueOf(cliente.getId()), cliente.getNombre(), atraccion.getNombre());
            
        }
        
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void txtAtraccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAtraccionActionPerformed
        String atraccionSeleccionada = (String) txtAtraccion.getSelectedItem();
        
        AtraccionControlador atraccionControlador = new AtraccionControlador();
        
        Atraccion atraccion = atraccionControlador.obtenerAtraccionPorNombre(atraccionSeleccionada);
        
        if (atraccion != null) {
            txtDescripcion.setText(atraccion.getDescripcion());
            txtCondiciones.setText(atraccion.getCondicionesUso());
            txtClasificacion.setText(atraccion.getClasificacion());
            txtAlturaMinima.setText(String.valueOf(atraccion.getAlturaMinima()));
        }
    }//GEN-LAST:event_txtAtraccionActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        dispose();
        VistaIngresoCliente vistaCliente = new VistaIngresoCliente();
        vistaCliente.setLocationRelativeTo(null);
        vistaCliente.setVisible(true);
    }//GEN-LAST:event_btnAtrasActionPerformed
    
        public void cargarAtraccionesHabilitadas() {
        AtraccionControlador atraccionControlador = new AtraccionControlador();

        // Crear un modelo para el JComboBox que contenga solo Strings
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        // Obtener la lista de estaciones habilitadas
        List<Atraccion> atraccionesHabilitadas = atraccionControlador.obtenerAtraccionesHabilitadas();

        // Agregar las ubicaciones de las estaciones habilitadas al modelo del JComboBox
        for (Atraccion atraccion : atraccionesHabilitadas) {
            if (atraccion != null && atraccion.getEstado().equals("Habilitada")) { // Verificar que no sea null y esté habilitada
                model.addElement(atraccion.getNombre());  // Agrega el nombre (String) de la atracción al modelo
            }
        }

        // Establecer el modelo en el JComboBox
        txtAtraccion.setModel(model);
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtAlturaMinima;
    private javax.swing.JComboBox<String> txtAtraccion;
    private javax.swing.JTextField txtClasificacion;
    private javax.swing.JTextPane txtCondiciones;
    private javax.swing.JTextPane txtDescripcion;
    private javax.swing.JTextField txtTiquete;
    // End of variables declaration//GEN-END:variables
}
