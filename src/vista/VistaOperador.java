/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.AtraccionControlador;
import controlador.ClienteControlador;
import controlador.TiqueteControlador;
import java.time.LocalDate;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Tiquete;

/**
 *
 * @author Heidy
 */
public class VistaOperador extends javax.swing.JFrame {

    /**
     * Creates new form VistaOperador
     */
    public VistaOperador() {
        initComponents();
        setTitle("Operador");
        cargarTiquetesEnTabla(tablaTiquetes);
        agregarAlertas(listaAlertas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAlertas = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaTiquetes = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtTiqueteId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTipo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEstado = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txtClienteId = new javax.swing.JTextField();
        btnAtras = new javax.swing.JButton();
        btnLeer = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnLeerTodos = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        jLabel2.setText("Tiquetes");

        jLabel1.setText("Aquí podrás gestionar los tiquetes y recibir alertas");

        listaAlertas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaAlertas);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 18)); // NOI18N
        jLabel3.setText("Alertas");

        tablaTiquetes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "tiquete_id", "tipo", "fecha adquisición", "estado", "cliente_id"
            }
        ));
        jScrollPane2.setViewportView(tablaTiquetes);

        jLabel4.setText("tiquete_id");

        txtTiqueteId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTiqueteIdActionPerformed(evt);
            }
        });

        jLabel5.setText("tipo");

        txtTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Premium", "Estandar", "Exclusivo" }));

        jLabel6.setText("fecha adquisicion ");

        jLabel7.setText("estado");

        txtEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Usado", "Cancelado" }));

        jLabel8.setText("cliente_id");

        txtClienteId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteIdActionPerformed(evt);
            }
        });

        btnAtras.setText("Atrás");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnLeer.setText("Leer");
        btnLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeerActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnLeerTodos.setText("Leer todos");
        btnLeerTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeerTodosActionPerformed(evt);
            }
        });

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        jLabel9.setText("AAAA-MM-DD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtras)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTiqueteId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtClienteId))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCrear, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEditar, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLeer)))
                            .addComponent(btnLeerTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtTiqueteId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtClienteId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCrear)
                                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addComponent(btnEditar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLeer)
                                .addGap(16, 16, 16)
                                .addComponent(btnBorrar)))
                        .addGap(18, 18, 18)
                        .addComponent(btnLeerTodos)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTiqueteIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTiqueteIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTiqueteIdActionPerformed

    private void txtClienteIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteIdActionPerformed

    private void btnLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeerActionPerformed
        int tiqueteId = Integer.parseInt(txtTiqueteId.getText());
        
        TiqueteControlador tiqueteControlador = new TiqueteControlador();
        Tiquete tiquete = tiqueteControlador.obtenerTiquetePorId(tiqueteId);
        
        // Obtener el modelo de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tablaTiquetes.getModel();

        // Limpiar la tabla antes de cargar nuevos datos
        modelo.setRowCount(0);
        
        if (tiquete != null) {
            // Agregar una única fila al modelo
            modelo.addRow(new Object[]{
                tiquete.getId(),                   // ID del tiquete
                tiquete.getTipo(),                 // Tipo del tiquete
                tiquete.getFechaAdquisicion(),     // Fecha de adquisición del tiquete
                tiquete.getEstadoAdquisicion(),    // Estado de adquisición del tiquete
                tiquete.getClienteAsociado().getId()       // Cliente asociado al tiquete
            });
        } else {
            // Mostrar mensaje si no se encontró la visita
            JOptionPane.showMessageDialog(null, "No se encontró la visita con el ID especificado.",
                                          "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnLeerActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int clienteId = Integer.parseInt(txtClienteId.getText());
        int tiqueteId = Integer.parseInt(txtTiqueteId.getText());
 
        ClienteControlador clienteControlador = new ClienteControlador();
        Cliente clienteAsociado = clienteControlador.obtenerClientePorId(clienteId);
        
        //Obtener los datos de tiquete
        String tipo = (String) txtTipo.getSelectedItem();
        LocalDate fechaAdquisicion = LocalDate.parse(txtFecha.getText());
        String estado = (String) txtEstado.getSelectedItem();
        
        Tiquete tiquete = new Tiquete(tipo, fechaAdquisicion,estado,clienteAsociado);
        
        TiqueteControlador tiqueteControlador = new TiqueteControlador();
        tiqueteControlador.actualizarTiquete(tiqueteId,tiquete);
        
        JOptionPane.showMessageDialog(this, "Tiquete actualizado correctamente.");

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        int tiqueteId = Integer.parseInt(txtTiqueteId.getText());
        
        TiqueteControlador tiqueteControlador = new TiqueteControlador();
        tiqueteControlador.eliminarTiquete(tiqueteId);       
        
        JOptionPane.showMessageDialog(this, "Tiquete eliminado correctamente.");
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnLeerTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeerTodosActionPerformed
        cargarTiquetesEnTabla(tablaTiquetes);
    }//GEN-LAST:event_btnLeerTodosActionPerformed

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        int clienteId = Integer.parseInt(txtClienteId.getText());
 
        ClienteControlador clienteControlador = new ClienteControlador();
        Cliente clienteAsociado = clienteControlador.obtenerClientePorId(clienteId);
        
        //Obtener los datos de tiquete
        String tipo = (String) txtTipo.getSelectedItem();
        LocalDate fechaAdquisicion = LocalDate.parse(txtFecha.getText());
        String estado = (String) txtEstado.getSelectedItem();
        
        Tiquete tiquete = new Tiquete(tipo, fechaAdquisicion,estado,clienteAsociado);
        
        TiqueteControlador tiqueteControlador = new TiqueteControlador();
        tiqueteControlador.insertarTiquete(tiquete);
        
        JOptionPane.showMessageDialog(this, "Tiquete creado correctamente.");
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        dispose();
        VistaEmpleado vistaEmpleado = new VistaEmpleado();
        vistaEmpleado.setLocationRelativeTo(null);
        vistaEmpleado.setVisible(true);
    }//GEN-LAST:event_btnAtrasActionPerformed
    
    public void cargarTiquetesEnTabla(javax.swing.JTable tablaTiquetes) {
        // Obtener el modelo de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tablaTiquetes.getModel();

        // Limpiar la tabla antes de cargar nuevos datos
        modelo.setRowCount(0);

        // Crear un controlador o acceso al DAO de Tiquetes
        TiqueteControlador tiqueteControlador = new TiqueteControlador();

        // Obtener todos los tiquetes desde el controlador
        List<Tiquete> tiquetes = tiqueteControlador.obtenerTodosLosTiquetes();

        // Iterar por la lista de tiquetes y agregar filas al modelo
        for (Tiquete tiquete : tiquetes) {
            modelo.addRow(new Object[]{
                tiquete.getId(),                   // ID del tiquete
                tiquete.getTipo(),                 // Tipo del tiquete
                tiquete.getFechaAdquisicion(),     // Fecha de adquisición del tiquete
                tiquete.getEstadoAdquisicion(),    // Estado de adquisición del tiquete
                tiquete.getClienteAsociado().getId()       // Cliente asociado al tiquete
            });
        }
    }
    
    public void agregarAlertas(javax.swing.JList<String> listaAlertas) {
        // Verificar si el modelo está vacío o no está asignado
        if (listaAlertas.getModel() == null || !(listaAlertas.getModel() instanceof DefaultListModel)) {
            // Crear un modelo por defecto y asignarlo al JList si no tiene uno
            DefaultListModel<String> model = new DefaultListModel<>();
            listaAlertas.setModel(model);
        }

        // Obtener el modelo de la lista
        DefaultListModel<String> model = (DefaultListModel<String>) listaAlertas.getModel();

        // Crear controlador y obtener las alertas
        AtraccionControlador atraccionControlador = new AtraccionControlador();
        List<String> alertas = atraccionControlador.obtenerAlertas();
        System.out.println(atraccionControlador.obtenerAlertas());
        
        for (String alerta : alertas) {
                model.addElement(alerta);  // Agregar cada alerta al DefaultListModel
        }
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnLeer;
    private javax.swing.JButton btnLeerTodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<String> listaAlertas;
    private javax.swing.JTable tablaTiquetes;
    private javax.swing.JTextField txtClienteId;
    private javax.swing.JComboBox<String> txtEstado;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JComboBox<String> txtTipo;
    private javax.swing.JTextField txtTiqueteId;
    // End of variables declaration//GEN-END:variables
}
